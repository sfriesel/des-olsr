#! /bin/sh
### BEGIN INIT INFO
# Provides:          des-olsr
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:
# Default-Stop:      0 1 6
# Short-Description: Start des-olsr daemon
# Description:       Start des-olsr daemon
### END INIT INFO

set -e

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

NAME=des-olsr
DESC="$NAME, a daemon based on libdessert"

# Defaults may be overwritten by /etc/default/$NAME
DAEMON=/usr/sbin/$NAME
LOGDIR=/var/log/$NAME
PIDFILE=/var/run/$NAME.pid

if [ ! -x $DAEMON ] ; then
    echo "daemon not found"
    exit 0
fi

DODTIME=1 # Time to wait for the server to die, in seconds
          # If this value is set too low you might not
          # let some servers to die gracefully and
          # 'restart' will not work

# unlimited core dump size
ulimit -c unlimited

# Include default configuration if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

build_conf()
{
    rm -rf /tmp/$NAME.cli
    echo "! File automatically created by $NAME init script." > /tmp/$NAME.cli
    echo "! Use /etc/$NAME.conf and /etc/default/$NAME for configuration." >> /tmp/$NAME.cli
    echo "! Your changes to this file will be overwritten!!!" >> /tmp/$NAME.cli
    echo "logging file $LOGFILE" >> /tmp/$NAME.cli
    cat $DAEMON_OPTS >> /tmp/$NAME.cli
    echo "pid $PIDFILE" >> /tmp/$NAME.cli
    echo "interface sys $TAP_NAME $TAP_IP $TAP_NETMASK" >> /tmp/$NAME.cli
    OIFS=$IFS
    IFS=","
    for i in $IFACE; do
        echo "interface mesh $i" >> /tmp/$NAME.cli
    done
    IFS=$OIFS
    echo "set port $CLI_PORT" >> /tmp/$NAME.cli
    return 0
}

running_pid()
{
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && echo "null pid" && return 1
    [ ! -d /proc/$pid ] && echo "no proc entry" &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n" | head -n 1 | cut -d : -f 1`
    # Is this the expected child?
    [ "$cmd" != "$name" ] && echo "no match:" "$cmd" "$name" &&  return 1
    return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && echo "no pidfile" && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
        kill -15 $pid
        # Is it really dead?
        [ -n "$DODTIME" ] && sleep "$DODTIME"s
        if running ; then
            kill -9 $pid
            [ -n "$DODTIME" ] && sleep "$DODTIME"s
            if running ; then
                echo "Cannot kill $LABEL (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
    return 0
}

case "$1" in
  start)
        build_conf
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
            --exec $DAEMON -- /tmp/$NAME.cli
        sleep 2
        if running ; then
            echo "$NAME."
        else
            echo " ERROR."
        fi
        ;;
  stop)
        echo -n "Stopping $DESC: "
        start-stop-daemon --stop --quiet --pidfile $PIDFILE \
            --exec $DAEMON
        echo "$NAME."
        ;;
  force-stop)
        echo -n "Forcefully stopping $DESC: "
        force_stop
        if ! running ; then
            echo "$NAME."
        else
            echo " ERROR."
        fi
        ;;
  #reload)
        #
        # If the daemon can reload its config files on the fly
        # for example by sending it SIGHUP, do it here.
        #
        # If the daemon responds to changes in its config file
        # directly anyway, make this a do-nothing entry.
        #
        # echo "Reloading $DESC configuration files."
        # start-stop-daemon --stop --signal 1 --quiet --pidfile \
        #       /var/run/$NAME.pid --exec $DAEMON
  #;;
  force-reload)
        #
        # If the "reload" option is implemented, move the "force-reload"
        # option to the "reload" entry above. If not, "force-reload" is
        # just the same as "restart" except that it does nothing if the
        # daemon isn't already running.
        # check wether $DAEMON is running. If so, restart
        build_conf
        start-stop-daemon --stop --test --quiet --pidfile \
            $PIDFILE --exec $DAEMON \
            && $0 restart \
            || exit 0
        ;;
  restart)
        echo -n "Restarting $DESC: "
        start-stop-daemon --stop --quiet --pidfile \
            $PIDFILE --exec $DAEMON
        [ -n "$DODTIME" ] && sleep $DODTIME
        build_conf
        start-stop-daemon --start --quiet --pidfile \
            $PIDFILE --exec $DAEMON -- /tmp/$NAME.cli
        echo "$NAME."
        ;;
  status)
    echo -n "$LABEL is "
    if running ;  then
        echo "running"
    else
        echo " not running."
        exit 1
    fi
    ;;
  *)
    N=/etc/init.d/$NAME
    # echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $N {start|stop|restart|force-reload|status|force-stop}" >&2
    exit 1
    ;;
esac

exit 0
